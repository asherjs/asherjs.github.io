/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _life = __webpack_require__(1);

document.addEventListener("DOMContentLoaded", function () {

    var menuElem = document.getElementById('social-button');
    var social = document.getElementsByClassName('navbar__social');

    menuElem.onclick = function () {
        social[0].classList.toggle('open');
    };

    (0, _life.startLife)();

    window.opener = null;
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.startLife = startLife;
var c = document.getElementById("life");
var navbar = document.querySelector('.navbar');
var parent = document.querySelector('.welcome');
var pauseButton = parent.querySelector('.welcome__play-pause');
var stop = false;
var frameCount = 0;
var fps = void 0,
    fpsInterval = void 0,
    startTime = void 0,
    now = void 0,
    then = void 0,
    elapsed = void 0,
    grid = void 0,
    gridWidth = void 0,
    gridHeight = void 0,
    mirrorGrid = void 0;
var ctx = c.getContext("2d");
var cellColor = '#ebebeb';

function startLife() {

    window.addEventListener("resize", startLife);

    //c.addEventListener("click", handleClick);

    pauseButton.addEventListener('click', handlePause);

    init();

    fillRandom();

    startAnimate(2);
}

function init() {
    console.log(window.getComputedStyle(c).width + 'width');
    gridHeight = Math.floor(c.offsetHeight / 10);
    gridWidth = Math.floor(c.offsetWidth / 10);
    c.width = gridWidth;
    c.height = gridHeight;

    if (gridHeight > gridWidth) {}

    ctx.fillStyle = cellColor;

    grid = createArray(gridHeight);
    mirrorGrid = createArray(gridHeight);
}

function createArray(rows) {
    var arr = [];
    for (var i = 0; i < rows; i++) {
        arr[i] = [];
    }
    return arr;
}

function fillRandom() {
    for (var j = 1; j < gridHeight; j++) {
        for (var k = 1; k < gridWidth; k++) {
            grid[j][k] = Math.round(Math.random() - 0.38);
        }
    }
    console.log(grid);
}

function drawGrid() {
    var liveCount = 0;
    ctx.clearRect(0, 0, gridWidth, gridHeight);
    for (var j = 1; j < gridHeight - 1; j++) {
        for (var k = 1; k < gridWidth - 1; k++) {
            if (grid[j][k] === 1) {
                ctx.fillStyle = cellColor;
                ctx.fillRect(k, j, 1, 1);
                liveCount++;
            }
        }
    }
}

function updateGrid() {

    for (var j = 1; j < gridHeight - 1; j++) {
        for (var k = 1; k < gridWidth - 1; k++) {
            var totalCells = 0;

            totalCells += grid[j - 1][k - 1]; //top left
            totalCells += grid[j - 1][k]; //top center
            totalCells += grid[j - 1][k + 1]; //top right

            totalCells += grid[j][k - 1]; //middle left
            totalCells += grid[j][k + 1]; //middle right

            totalCells += grid[j + 1][k - 1]; //bottom left
            totalCells += grid[j + 1][k]; //bottom center
            totalCells += grid[j + 1][k + 1]; //bottom right

            switch (totalCells) {
                case 2:
                    mirrorGrid[j][k] = grid[j][k];

                    break;
                case 3:
                    mirrorGrid[j][k] = 1;

                    break;
                default:
                    mirrorGrid[j][k] = 0;
            }
        }
    }

    for (var i = 1; i < gridHeight - 1; i++) {
        mirrorGrid[i][0] = mirrorGrid[i][gridWidth - 3];
        mirrorGrid[i][gridWidth - 2] = mirrorGrid[i][1];
        mirrorGrid[0][i] = mirrorGrid[gridHeight - 3][i];
        mirrorGrid[gridHeight - 2][i] = mirrorGrid[1][i];
    }

    //swap grids
    var temp = grid;
    grid = mirrorGrid;
    mirrorGrid = temp;
}

function animate() {
    if (stop) {
        return;
    }
    requestAnimationFrame(animate);

    now = Date.now();
    elapsed = now - then;

    if (elapsed > fpsInterval) {
        then = now - elapsed % fpsInterval;
        drawGrid();
        updateGrid();
    }
}

function startAnimate(fps) {
    fpsInterval = 1000 / fps;
    then = Date.now();
    startTime = then;
    animate();
}

function handlePause() {
    stop = !stop;
    if (!stop) {
        startAnimate(2);
    }
    pauseButton.classList.toggle('change-icon');
}
/*
function handleClick(event) {
    let navbarHeight = navbar.offsetHeight;

    let x = event.clientX;
    let y = event.clientY - 70;

    let gridX = Math.floor(x / 10);
    let gridY = Math.floor(y / 10);

    ctx.fillStyle = cellColor;
    ctx.fillRect(gridX, gridY, 1, 1);
    console.log('X: ' + x + '  Y: ' + y);
    console.log('gridX: ' + gridX + '; gridY: ' + gridY);
}
*/

/***/ })
/******/ ]);