/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _life = __webpack_require__(1);

document.addEventListener("DOMContentLoaded", function () {

    var menuElem = document.getElementById('social-button');
    var social = document.getElementsByClassName('navbar__social');

    menuElem.onclick = function () {
        social[0].classList.toggle('open');
    };

    (0, _life.startLife)();

    window.opener = null;
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.startLife = startLife;
var c = document.getElementById("life");
var navbar = document.querySelector('.navbar');
var pauseButton = document.querySelector('.welcome__play-pause');
var stop = false;
var frameCount = 0;
var isMouseDown = false;
var fpsInterval = void 0,
    startTime = void 0,
    now = void 0,
    then = void 0,
    elapsed = void 0,
    grid = void 0,
    gridWidth = void 0,
    gridHeight = void 0,
    mirrorGrid = void 0,
    navbarHeight = void 0;
var ctx = c.getContext("2d");
var cellColor = '#ebebeb';

function startLife() {

    window.addEventListener('resize', startLife);

    c.addEventListener('mousedown', handleMousedown);

    c.addEventListener('mouseup', handleMouseup);

    c.addEventListener('mousemove', handleMousemove);

    pauseButton.addEventListener('click', handlePause);

    init();

    fillRandom(0.4);

    startAnimate(5);

    fadeIn();
}

function fadeIn() {
    c.classList.add('fadein');
}

function init() {
    navbarHeight = navbar.offsetHeight;
    gridHeight = Math.round(c.offsetHeight / 10);
    gridWidth = Math.round(c.offsetWidth / 10);
    c.width = gridWidth;
    c.height = gridHeight;

    ctx.fillStyle = cellColor;

    grid = createArray(gridHeight);
    mirrorGrid = createArray(gridHeight);
}

function createArray(rows) {
    var arr = [];
    for (var i = 0; i < rows; i++) {
        arr[i] = [];
    }
    return arr;
}

function fillRandom(f) {
    for (var j = 0; j < gridHeight; j++) {
        for (var k = 0; k < gridWidth; k++) {
            grid[j][k] = Math.round(Math.random() - f);
        }
    }
}

function drawGrid() {
    var liveCount = 0;
    ctx.clearRect(0, 0, gridWidth, gridHeight);
    for (var j = 0; j < gridHeight; j++) {
        for (var k = 0; k < gridWidth; k++) {
            if (grid[j][k] === 1) {
                ctx.fillStyle = cellColor;
                ctx.fillRect(k, j, 1, 1);
                liveCount++;
            }
        }
    }
}

function updateGrid() {

    for (var j = 0; j < gridHeight; j++) {
        for (var k = 0; k < gridWidth; k++) {
            var totalCells = 0;

            var columnLeft = k - 1 >= 0 ? k - 1 : gridWidth - 1;
            var columnRight = k + 1 <= gridWidth - 1 ? k + 1 : 0;
            var rowAbove = j - 1 >= 0 ? j - 1 : gridHeight - 1;
            var rowBelow = j + 1 <= gridHeight - 1 ? j + 1 : 0;

            totalCells += grid[rowAbove][columnLeft];
            totalCells += grid[rowAbove][k];
            totalCells += grid[rowAbove][columnRight];
            totalCells += grid[j][columnLeft];
            totalCells += grid[j][columnRight];
            totalCells += grid[rowBelow][columnLeft];
            totalCells += grid[rowBelow][k];
            totalCells += grid[rowBelow][columnRight];

            switch (totalCells) {
                case 2:
                    mirrorGrid[j][k] = grid[j][k];

                    break;
                case 3:
                    mirrorGrid[j][k] = 1;

                    break;
                default:
                    mirrorGrid[j][k] = 0;
            }
        }
    }

    for (var i = 0; i < gridHeight; i++) {
        mirrorGrid[i][0] = mirrorGrid[i][gridWidth - 3];
        mirrorGrid[i][gridWidth - 2] = mirrorGrid[i][1];
        mirrorGrid[0][i] = mirrorGrid[gridHeight - 3][i];
        mirrorGrid[gridHeight - 2][i] = mirrorGrid[1][i];
    }

    var temp = grid;
    grid = mirrorGrid;
    mirrorGrid = temp;
}

function animate() {
    if (stop) {
        return;
    }
    requestAnimationFrame(animate);

    now = Date.now();
    elapsed = now - then;

    if (elapsed > fpsInterval) {
        then = now - elapsed % fpsInterval;
        drawGrid();
        updateGrid();
    }
}

function startAnimate(fps) {
    fpsInterval = 1000 / fps;
    then = Date.now();
    startTime = then;
    animate();
}

function getTile(x, y) {
    x = Math.floor(x / 10);
    y = Math.floor(y / 10);
    return { j: x, k: y };
}

function createCell(pageX, pageY, color) {
    var x = pageX;
    var y = pageY - navbarHeight;
    var tile = getTile(x, y);

    grid[tile.k][tile.j] = 1;

    ctx.fillStyle = color;
    ctx.fillRect(tile.j, tile.k, 1, 1);
}

function handlePause() {
    stop = !stop;
    if (!stop) {
        startAnimate(5);
    }
    pauseButton.classList.toggle('change-icon');
}

function isLeftButton(event) {
    var button = event.which ? event.which : event.button;
    return button < 2;
}

function handleMousedown(e) {
    if (isLeftButton(e)) {
        isMouseDown = true;
        createCell(e.pageX, e.pageY, cellColor);
    }
}

function handleMousemove(e) {
    if (isMouseDown) {
        createCell(e.pageX, e.pageY, cellColor);
    }
}

function handleMouseup(e) {
    if (isLeftButton(e)) {
        isMouseDown = false;
    }
}

/***/ })
/******/ ]);